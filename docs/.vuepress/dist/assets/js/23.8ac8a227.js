(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{380:function(n,e,t){"use strict";t.r(e);var a=t(9),r=Object(a.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("p",[n._v("通过设计c语言常见单词的正规文法或正规式，而后得到NFA，再确定化得到DFA，根据DFA的转换矩阵或转换图，用c++语言实现词法分析器。")]),n._v(" "),t("h2",{attrs:{id:"题目分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#题目分析","aria-hidden":"true"}},[n._v("#")]),n._v(" 题目分析")]),n._v(" "),t("p",[n._v("我们这次的目标就是实现跟上一篇文章一样的词法分析器的效果，只不过这一次我们是自己编程来实现这一过程，难度稍微加大了一点点。不过还是比较简单的，现在就一步步剖析要做的事情。需要识别的关键字包括void, int, main, double, return, float, if, else, do, while, for, scanf, printf, char, sqrt, abs, 运算符(算术、关系、逻辑、位)；需要识别的其他单词有标识符, 整数（十进制形式、指数形式），实数（十进制形式、指数形式），字符串；过滤注释及空格。")]),n._v(" "),t("h3",{attrs:{id:"思路分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#思路分析","aria-hidden":"true"}},[n._v("#")]),n._v(" 思路分析")]),n._v(" "),t("p",[n._v("想一想词法分析器的过程，其实实质上也就是一个字符一个字符的识别，碰到可识别的单词并且没法继续往下走的时候就是识别到了一个单词，之后从头开始识别；就像下面这个图片里面的一样；有了这个图也就是有了我们今天写代码的思路。")]),n._v(" "),t("p",[t("img",{attrs:{src:"http://src.xerrors.fun/blog/20200107/WmmMhCciST3m.jpg?imageslim",alt:"mark"}})]),n._v(" "),t("p",[n._v("我们需要识别的类型有：")]),n._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('static string keywords[12] = {"scanf","printf","if","else","for","while","return","do","main","abs","sqrt","float"};\nstatic string type[8] = {"int","double","void","short","char","long","unsigned int"};\n')])])]),t("h3",{attrs:{id:"实现方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现方法","aria-hidden":"true"}},[n._v("#")]),n._v(" 实现方法")]),n._v(" "),t("p",[n._v("因为需要 C++ 语言来编写，所以，我们可以使用类来帮助我们完成代码，这样可以更加方便我们后来的使用。首先我们需要完成的方法有：")]),n._v(" "),t("ul",[t("li",[n._v("scan 扫描的函数：对整个输入文件进行扫描")]),n._v(" "),t("li",[n._v("print 输出的函数：在扫描结束之后输出结果信息")]),n._v(" "),t("li",[n._v("isKeyWord 等判断函数：对单词类型的判断，可能经常用到，封装一下")])]),n._v(" "),t("p",[n._v("属性需要：")]),n._v(" "),t("ul",[t("li",[n._v("word 存放构成单词的字符串")]),n._v(" "),t("li",[n._v("line 记录行号")]),n._v(" "),t("li",[n._v("ch 存放每次读入的字符")]),n._v(" "),t("li",[n._v("msg 存放消息的链表")])]),n._v(" "),t("p",[n._v("解释一下：word 是干嘛的？当程序执行的时候是一个字符一个字符进行识别的，所以在识别结束之前，会把字符串先存起来，比如我们在识别字符 "),t("code",[n._v("main")]),n._v(" 的时候，我们读取到了字符 "),t("code",[n._v("i")]),n._v("，此时 "),t("code",[n._v("word")]),n._v(" 的值就是 "),t("code",[n._v("mai")]),n._v("；")]),n._v(" "),t("p",[n._v("关于消息，跟之前的方法一样是把消息一条一条放在链表里面，为了能进行错误处理，所以最后再输出。因为每个消息都要输出所识别的单词的行号，类型，值，同时节点中还要包括后面节点的地址，所以消息的结构体如下：")]),n._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("struct Msg {\n  int line;\n  string token;\n  string word;\n  Msg* next = nullptr;\n};\n")])])]),t("p",[n._v("类的构造如下：")]),n._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("class LA {\nprivate:\n    string word; //存放构成单词的字符串\n    int line; //记录行数\n    char ch; //存放每次读入的字符\n    Msg *m; // 指针，后面会详细说\n    Msg *p; // 指针，后面会详细说\npublic:\n    void show(string s); // 后面详细说\n    LA();\n    void scan();\n    void print();\n    void recoNum();   // 当识别的是数字时\n    void recoFloat(); // 当识别的是浮点数时\n    bool isKeyWord();   // 判断是否是关键字\n    bool isType();      // 判断是否是类型\n};\n")])])]),t("h2",{attrs:{id:"上手实践"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#上手实践","aria-hidden":"true"}},[n._v("#")]),n._v(" 上手实践")]),n._v(" "),t("p",[n._v("有了上面的定义，我们就可以着手写我们的代码了，上面的拼拼凑凑也就是一个初级状态出现了：")]),n._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('#include <cctype>\n#include <iostream>\n#include <fstream>\n#include <sstream>\n#include <string>\n\nusing namespace std;\n\n//保留字数组\nstatic string keywords[12] = {"scanf","printf","if","else","for","while","return","do","main","abs","sqrt","float"};\nstatic string type[8] = {"int","double","void","short","char","long","unsigned int"};\n\nstruct Msg {\n  int line;\n  string token;\n  string word;\n  Msg* next = nullptr;\n};\n\nclass LA {\nprivate:\n    string word; //存放构成单词的字符串\n    int line; //记录行数\n    char ch; //存放每次读入的字符\n    Msg *m;\n    Msg *p;\npublic:\n    void show(string s); // 后面会介绍\n    LA();\n    void scan();\n    void print();\n    void recoNum();\n    void recoFloat();\n    bool isKeyWord();\n    bool isType();\n};\n\nint main() {\n    LA l;\n    l.scan();\n    l.print();\n    return 0;\n}\n')])])]),t("p",[n._v("main 函数里面内容不多，首先初始化一个类，然后扫描，然后输出结束，很简单对吧，但是，，怎么实现这个类以及里面的方法呢？那就继续往下面看吧！这个文件可以单独创建一个"),t("code",[n._v(".h")]),n._v("文件，也可以放在"),t("code",[n._v("c++")]),n._v("文件里面，我图个方便，反正项目也不大，就放在一个文件里面了，不过项目比较大的话，一定要养成文件分开存放的好习惯！")]),n._v(" "),t("h3",{attrs:{id:"初始化类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#初始化类","aria-hidden":"true"}},[n._v("#")]),n._v(" 初始化类")]),n._v(" "),t("p",[n._v("先来个简单的，初始化类的时候也就是把我们的属性都给初始化一下，直接看代码吧，一看就懂；")]),n._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("LA::LA():line(1), ch('\\0') {\n    m = new Msg;\n    p = m;\n}\n")])])]),t("p",[n._v("上面看懂了的话可以跳过此处！初始化行号为 "),t("code",[n._v("1")]),n._v("，"),t("code",[n._v("ch")]),n._v(" 为 "),t("code",[n._v("0")]),n._v("；同时创建一个消息列表，"),t("code",[n._v("m")]),n._v(" 是消息链表的头，"),t("code",[n._v("p")]),n._v(" 指针指向首地址；（如果看不太懂，复习下《数据结构》咯~）")]),n._v(" "),t("h3",{attrs:{id:"标识符判断"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#标识符判断","aria-hidden":"true"}},[n._v("#")]),n._v(" 标识符判断")]),n._v(" "),t("p",[n._v("从上面的那个图片里面我们可以看到，标识符和保留字的识别方法是一样的，所以需要我们额外识别一下，办法也只有一个：一个一个的比较，所以为了减少这个繁琐的工作，我们把这个功能封装成函数，又是很好理解的，别担心，好戏都在后头呢：")]),n._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("bool LA::isKeyWord() {\n    for(int i = 0; i < 12; i++){\n        if(word == keywords[i])\n            return true;\n    }\n    return false;\n}\n\nbool LA::isType() {\n    for(int i = 0; i < 8; i++){\n        if(word == type[i])\n            return true;\n    }\n    return false;\n}\n")])])]),t("h3",{attrs:{id:"扫描函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#扫描函数","aria-hidden":"true"}},[n._v("#")]),n._v(" 扫描函数")]),n._v(" "),t("h4",{attrs:{id:"实现思路"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现思路","aria-hidden":"true"}},[n._v("#")]),n._v(" 实现思路")]),n._v(" "),t("p",[n._v("这里把扫描的思路说一下，其实原理非常的简单：对照上面的那个图片（算了我还是拿下来吧，方便对照，在下面）通过"),t("code",[n._v("getchar()")]),n._v("来获取下一个要识别的字符，比如我们读取的字符是"),t("code",[n._v("<")]),n._v("，那我们下一步就判断识别到的是不是"),t("code",[n._v("=")]),n._v("，如果是等于号，我们就识别成功为"),t("code",[n._v("<=")]),n._v("，如果不是等于号，那就识别为"),t("code",[n._v("<")]),n._v("；之后读取下一个字符，重新循环，直到识别到结尾 "),t("code",[n._v("EOF")]),n._v("为止；")]),n._v(" "),t("blockquote",[t("p",[n._v("EOF （End Of File）表示文件的结束字符，当识别到EOF的时候也就代表文档识别结束，EOF在计算机中值是 -1")])]),n._v(" "),t("p",[t("img",{attrs:{src:"http://src.xerrors.fun/blog/20200107/WmmMhCciST3m.jpg?imageslim",alt:"mark"}})]),n._v(" "),t("p",[n._v("所以，由此可见，我们的"),t("code",[n._v("scan")]),n._v("函数的主体就是一个 "),t("code",[n._v("while")]),n._v("循环和一大堆"),t("code",[n._v("if")]),n._v("判断了；")]),n._v(" "),t("h4",{attrs:{id:"show-函数！"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#show-函数！","aria-hidden":"true"}},[n._v("#")]),n._v(" show() 函数！")]),n._v(" "),t("p",[n._v("从上面的思路中我们可以看到，当我们识别到一个单词的时候需要做很多事情，比如，创建一个消息节点，把单词、行号、类型等放进去，然后把word清空，所以我们还是把这些琐碎的事情封装起来吧！")]),n._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("void LA::show(string s) {\n    Msg* tmp = new Msg;\n    tmp->line = line;\t// 行号\n    tmp->token = s;\t\t// 类型；如 KeyWord\n    tmp->word = word;\t// 单词\n    p->next = tmp;\n    p = p->next;\n    word.clear();\n} \n")])])]),t("p",[n._v("由于 "),t("code",[n._v("line word")]),n._v("是LA类的属性，所以就只需要传入一个类型ｓ就行；")]),n._v(" "),t("h4",{attrs:{id:"大致框架"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#大致框架","aria-hidden":"true"}},[n._v("#")]),n._v(" 大致框架")]),n._v(" "),t("p",[n._v("因为这个函数实在是太太太太太太长了，还是先把框架来了解一下，很好理解，前面的部分是把空格或者其他的无关的字符过滤掉；之后会对每一个部分进行详细详细的说明！")]),n._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("void LA::scan() {\n    char tmp;\n    //读取第一个非空字符\n    do{\n        ch = getchar();\n        if(ch == 10)\n            line++;\n    } while(ch == ' ' || ch == 10);\n\n    while(ch != '\\0' && ch != EOF){\n        while(ch == ' ' || ch == 10){ // 10 表示'\\n'\n            if(ch == 10)\n                line++;\n            ch = getchar();\n        }\n\n        //处理 keyword type identify\n        if(ch == '_' || isalpha(ch)){\n            xxxx\n        }\n\n        // 处理带正负号\n        if (ch == '+' || ch == '-') {\n            xxxx\n        }\n        \n\t\t// 处理一般的数字\n        if (ch >= '1' && ch <= '9') {\n            recoNum();\n        }\n        \n        // 处理注释\n        if (ch == '/') {\n            xxxx\n        }\n\n        //处理符号\n        switch(ch){\n            xxxx\n        }\n    }\n}\n")])])]),t("h4",{attrs:{id:"处理标识符、关键字、类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#处理标识符、关键字、类型","aria-hidden":"true"}},[n._v("#")]),n._v(" 处理标识符、关键字、类型")]),n._v(" "),t("p",[n._v("关于标识符的特点大家一定都知道，开头为下划线或者是字母，后面可以跟下划线、字母和数字；识别到一个标识符之后还需要判断是否是关键字或者类型，所以就有了下面的代码：")]),n._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('//处理 keyword type identify\nif(ch == \'_\' || isalpha(ch)){\n    word += ch;\n    ch = getchar();\n    while(isalnum(ch) || ch == \'_\'){ // isalnum() 判断是否是字母或数字\n        word += ch;\n        ch = getchar();\n    }\n\n    if (isKeyWord())\n        show("keyword");\n    else if (isType())\n        show("type");\n    else\n        show("identify");\n}\n')])])]),t("h4",{attrs:{id:"处理正负号"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#处理正负号","aria-hidden":"true"}},[n._v("#")]),n._v(" 处理正负号")]),n._v(" "),t("p",[n._v("这个还是有点棘手的，为啥呢？首先 "),t("code",[n._v("+ -")]),n._v("可以出现在数字的前面，也可以表示单独的运算符，同时也可以跟等于号一起表示一个运算符；但是由于对于数字的处理比较麻烦且后面也会用到，所以就封装成一个函数"),t("code",[n._v("recoNum()")]),n._v("了（放在后面讲）。分开之后，难度就大大降低了。")]),n._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 处理 integer\nif (ch == '+' || ch == '-') {\n    word += ch; ch = getchar(); // 判断下一个字符\n    if(ch == '='){\n        // 操作符\n        word += ch; ch = getchar();\n        show(\"OPT\");\n    } else if (ch == '0') {\n        // 因为 ±0 也是有意义的且后面不能跟数字，所以识别结束\n        word += ch; ch = getchar();\n        show(\"integer\");\n    } else if (ch >= '1' && ch <= '9') {\n        // 可能是个数字\n        recoNum();\n    } else {\n        // 操作符\n        show(\"OPT\");\n    }\n}\n")])])]),t("h4",{attrs:{id:"处理数字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#处理数字","aria-hidden":"true"}},[n._v("#")]),n._v(" 处理数字")]),n._v(" "),t("p",[n._v("超级简单：")]),n._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("if (ch >= '1' && ch <= '9') {\n    recoNum();\n}\n")])])]),t("p",[n._v("哈哈哈哈，因为难的在后面，下面就看一下，"),t("code",[n._v("recoNum()")]),n._v("的实现方法：")]),n._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("void LA::recoNum() {\n    word += ch; ch = getchar();\t// 读取下一个字符\n    while (isdigit(ch)) {\n        word += ch; ch = getchar();\n    }\n\n    // 处理 decimal\n    if (ch == '.') {\n        word += ch; ch = getchar();\n        if (!isdigit(ch)) {\n            // 此处应该报错！\n            word.clear();\n        } else {\n            while (isdigit(ch)) {\n                word += ch; ch = getchar();\n            }\n            if (ch == 'e') {\n                recoFloat();\n            } else {\n                show(\"decimal\");\n            }\n        }\n    }\n    // 处理 float\n    else if (ch == 'e') {\n        recoFloat();\n    }\n    else {\n        show(\"integer\");\n    }\n}\n")])])]),t("p",[n._v("上面的代码又出现了一个新的函数"),t("code",[n._v("recoFloat()")]),n._v("看名字就知道，是用来识别带指数的浮点数的，后面慢慢介绍，先把思路搞懂；虽然看着繁琐了一点，但是还是逻辑清晰，很好理解的；")]),n._v(" "),t("h4",{attrs:{id:"识别浮点数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#识别浮点数","aria-hidden":"true"}},[n._v("#")]),n._v(" 识别浮点数")]),n._v(" "),t("p",[n._v("新的函数"),t("code",[n._v("recoFloat()")]),n._v("，在这篇文章中，我们只识别一种错误，就是浮点数的错误，所以下面会涉及到错误处理；想一想浮点数的特点"),t("code",[n._v("1e5 2e-5")]),n._v("都是数，理解了就很简单了：")]),n._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('void LA::recoFloat() {\n    word += ch; ch = getchar();\n    if (ch == \'+\' || ch == \'-\') {\n        word += ch; ch = getchar();\n    }\n\n    if (ch < \'1\' || ch > \'9\') {\n        // 出错直接中止退出，简单粗暴\n        cout << "Error at Line " << line << ": Illegal floating point number \\"" << word << "\\".\\n";\n        exit(-1);\n        word.clear();\n    }\n\n    while(isdigit(ch)) {\n        word += ch; ch = getchar();\n    }\n    show("float");\n}\n')])])]),t("p",[n._v("全部是"),t("code",[n._v("if")]),n._v("判断也没啥好解释的。")]),n._v(" "),t("h4",{attrs:{id:"处理注释"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#处理注释","aria-hidden":"true"}},[n._v("#")]),n._v(" 处理注释")]),n._v(" "),t("p",[n._v("好了，前面介绍了几个封装的函数，现在还是回到主线，"),t("code",[n._v("scan()")]),n._v("函数这里吧；注释的特点就是 "),t("code",[n._v("/")]),n._v("打头，但是不要忘记了，"),t("code",[n._v("/")]),n._v("本身就是一个运算符，当我们识别到一个"),t("code",[n._v("/")]),n._v("的时候，有很多种可能，可能是单个字符的运算符，也可能是"),t("code",[n._v("/=")]),n._v("这样的运算符，也可能是"),t("code",[n._v("//")]),n._v("单行注释，也可能是"),t("code",[n._v("/*")]),n._v("多行注释，因为我们在识别注释的时候是不做任何处理的，所以就选择不去影响我们的"),t("code",[n._v("word")]),n._v("，但是又需要识别下一个字符，所以就存到一个临时变量里面。")]),n._v(" "),t("p",[n._v("同时，如果下一个字符并不能被识别成注释或者"),t("code",[n._v("/=")]),n._v("，我们就把刚才识别到的字符放回到输入缓存区中，也就是使用"),t("code",[n._v("ungetc(tmp, stdin);")]),n._v("后面在识别多行注释的结束的地方的时候，也会使用到类似的操作，也就是有的时候需要临时看一下后面的字符，如果不是想要的还可以放回缓存区。")]),n._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 处理注释\nif (ch == '/') {\n    tmp = getchar();\n    if (tmp == '/') {\n        // 单行注释，就像这样\n        while ((ch = getchar()) != '\\n');\n    } else if (tmp == '*') {\n        /* 多行注释就像是这样 */\n        while ((ch = getchar()) != EOF) {\n            if (ch == '*') {\n                tmp = getchar();\n                if (tmp == '/') {\n                    ch = getchar();\n                    break;\n                } else {\n                    ungetc(tmp, stdin);\n                }\n            }\n        }\n    } else if (tmp == '=') {\n        word += ch; word += tmp; ch = getchar();\n        show(\"OPT\");\n    } else {\n        word += ch;\n        ungetc(tmp, stdin);\n        show(\"OPT\");\n    }\n}\n")])])]),t("h4",{attrs:{id:"处理符号"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#处理符号","aria-hidden":"true"}},[n._v("#")]),n._v(" 处理符号")]),n._v(" "),t("p",[n._v("处理运算符，可以单个作为运算符，也可以跟等号一起作为运算符：")]),n._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("case '*':\ncase '=':\ncase '<':\ncase '>':\ncase '!':\n    tmp = getchar();\n    if(tmp == '='){\n        word += ch;\n        word += tmp; // '='\n        ch = getchar();\n        show(\"OPT\");\n        break;\n    }\n    else{\n        ungetc(tmp, stdin);\n        word += ch; ch = getchar();\n        show(\"OPT\");\n        break;\n    }\n    break;\n")])])]),t("p",[n._v("处理分隔符：")]),n._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("case ',': \ncase '\\\\': \ncase ';': \ncase ':': \ncase '(': \ncase ')': \ncase '[': \ncase ']': \ncase '{': \ncase '}': \ncase '\"': \ncase '\\'':\n    word += ch; ch = getchar();\n    show(\"bracket\");\n    break;\n")])])]),t("p",[n._v("题目类型中还有一种特别的类型，以"),t("code",[n._v("&")]),n._v("或"),t("code",[n._v("%")]),n._v("开头，后面跟一个字母或数字的：")]),n._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("case '%':\ncase '&':\n    tmp = getchar();\n    if(isalnum(tmp)){\n        word += ch;\n        word += tmp;\n        ch = getchar();\n        show(\"typeidentify\");\n        break;\n    } else {\n        ungetc(tmp, stdin);\n        break;\n    }\n")])])]),t("p",[n._v("对 "),t("code",[n._v("0")]),n._v("进行特殊处理，因为上面在算数字的时候没有算上0：")]),n._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 这里对 0 进行特殊处理，后来可以在判断八进制中进行\ncase '0':\n    word += ch; ch = getchar();\n    show(\"integer\");\n    break;\n\ndefault:\n    // ch = getchar();\n    break;\n")])])]),t("h4",{attrs:{id:"完结撒花！"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#完结撒花！","aria-hidden":"true"}},[n._v("#")]),n._v(" 完结撒花！")]),n._v(" "),t("p",[n._v("🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉")]),n._v(" "),t("h2",{attrs:{id:"代码详情"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#代码详情","aria-hidden":"true"}},[n._v("#")]),n._v(" 代码详情")]),n._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("#ifndef LEXICAL_ANALYZER_LA_H\n#define LEXICAL_ANALYZER_LA_H\n\n#include <cctype>\n#include <iostream>\n#include <fstream>\n#include <sstream>\n#include <string>\n\n\nusing namespace std;\n\n//保留字数组\nstatic string keywords[12] = {\"scanf\",\"printf\",\"if\",\"else\",\"for\",\"while\",\"return\",\"do\",\"main\",\"abs\",\"sqrt\",\"float\"};\nstatic string type[8] = {\"int\",\"double\",\"void\",\"short\",\"char\",\"long\",\"unsigned int\"};\n\nstruct Msg {\n  int line;\n  string token;\n  string word;\n  Msg* next = nullptr;\n};\n\nclass LA {\nprivate:\n    string word; //存放构成单词的字符串\n    int line; //记录行数\n    char ch; //存放每次读入的字符\n    Msg *m;\n    Msg *p;\npublic:\n    void show(string s);\n    LA();\n    void scan();\n    void print();\n    void recoNum();\n    void recoFloat();\n    bool isKeyWord();\n    bool isType();\n};\n\n#endif //LEXICAL_ANALYZER_LA_H\n\nusing namespace std;\n\nint main() {\n    LA l;\n    l.scan();\n    l.print();\n    return 0;\n}\n\nLA::LA():line(1), ch('\\0') {\n    m = new Msg;\n    p = m;\n}\n\nvoid LA::show(string s) {\n    Msg* tmp = new Msg;\n    tmp->line = line;\n    tmp->token = s;\n    tmp->word = word;\n    p->next = tmp;\n    p = p->next;\n    // cout<< \"line\" << line << \":(\" << s << \", \" << word <<')'<< endl;\n    word.clear();\n} \n\nvoid LA::print() {\n    p = m;\n    p = p->next;\n    while(p) {\n        cout<< \"line\" << p->line << \":(\" << p->token << \", \" << p->word <<')'<< endl;\n        p = p->next;\n    }\n}\n\nbool LA::isKeyWord() {\n    for(int i = 0; i < 12; i++){\n        if(word == keywords[i])\n            return true;\n    }\n    return false;\n}\n\nbool LA::isType() {\n    for(int i = 0; i < 8; i++){\n        if(word == type[i])\n            return true;\n    }\n    return false;\n}\n\nvoid LA::recoFloat() {\n    word += ch; ch = getchar();\n    if (ch == '+' || ch == '-') {\n        word += ch; ch = getchar();\n    }\n\n    if (ch < '1' || ch > '9') {\n        cout << \"Error at Line \" << line << \": Illegal floating point number \\\"\" << word << \"\\\".\\n\";\n        exit(-1);\n        word.clear();\n    }\n\n    while(isdigit(ch)) {\n        word += ch; ch = getchar();\n    }\n    show(\"float\");\n}\n\nvoid LA::recoNum() {\n    word += ch; ch = getchar();\n    while (isdigit(ch)) {\n        word += ch; ch = getchar();\n    }\n\n    // 处理 decimal\n    if (ch == '.') {\n        word += ch; ch = getchar();\n        if (!isdigit(ch)) {\n            // 此处应该报错！\n            word.clear();\n        } else {\n            while (isdigit(ch)) {\n                word += ch; ch = getchar();\n            }\n            if (ch == 'e') {\n                recoFloat();\n            } else {\n                show(\"decimal\");\n            }\n        }\n    }\n\n    // 处理 float\n    else if (ch == 'e') {\n        recoFloat();\n    }\n\n    else {\n        show(\"integer\");\n    }\n\n\n}\n\nvoid LA::scan() {\n    char tmp;\n    //读取第一个非空字符\n    do{\n        ch = getchar();\n        if(ch == 10)\n            line++;\n    } while(ch == ' ' || ch == 10);\n\n    while(ch != '\\0' && ch != EOF){\n        while(ch == ' ' || ch == 10){\n            if(ch == 10)\n                line++;\n            ch = getchar();\n        }\n\n        //处理 keyword type identify\n        if(ch == '_' || isalpha(ch)){\n            word += ch;\n            ch = getchar();\n            while(isalnum(ch) || ch == '_'){\n                word += ch;\n                ch = getchar();\n            }\n\n            if (isKeyWord())\n                show(\"keyword\");\n            else if (isType())\n                show(\"type\");\n            else\n                show(\"identify\");\n        }\n\n        // 处理 integer\n        if (ch == '+' || ch == '-') {\n            word += ch; ch = getchar();\n            if(ch == '='){\n                // 操作符\n                word += ch; ch = getchar();\n                show(\"OPT\");\n            } else if (ch == '0') {\n                // 可以是识别成一个数字了\n                word += ch; ch = getchar();\n                show(\"integer\");\n            } else if (ch >= '1' && ch <= '9') {\n                // 可能是个数字\n                recoNum();\n            } else {\n                // 操作符\n                show(\"OPT\");\n            }\n        }\n\n        if (ch >= '1' && ch <= '9') {\n            recoNum();\n        }\n        \n        // 处理注释\n        if (ch == '/') {\n            tmp = getchar();\n            if (tmp == '/') {\n                while ((ch = getchar()) != '\\n');\n            } else if (tmp == '*') {\n                while ((ch = getchar()) != EOF) {\n                    if (ch == '*') {\n                        tmp = getchar();\n                        if (tmp == '/') {\n                            ch = getchar();\n                            break;\n                        } else {\n                            ungetc(tmp, stdin);\n                        }\n                    }\n                }\n            } else if (tmp == '=') {\n                word += ch; word += tmp; ch = getchar();\n                show(\"OPT\");\n            } else {\n                ungetc(tmp, stdin);\n                show(\"OPT\");\n            }\n        }\n\n        //处理符号\n        switch(ch){\n            //处理运算符\n            case '*':\n            case '=':\n            case '<':\n            case '>':\n            case '!':\n                tmp = getchar();\n                if(tmp == '='){\n                    word += ch;\n                    word += tmp; // '='\n                    ch = getchar();\n                    show(\"OPT\");\n                    break;\n                }\n                else{\n                    ungetc(tmp, stdin);\n                    word += ch; ch = getchar();\n                    show(\"OPT\");\n                    break;\n                }\n                break;\n\n            //处理分隔符\n            case ',': \n            case '\\\\': \n            case ';': \n            case ':': \n            case '(': \n            case ')': \n            case '[': \n            case ']': \n            case '{': \n            case '}': \n            case '\"': \n            case '\\'':\n                word += ch; ch = getchar();\n                show(\"bracket\");\n                break;\n\n            // 处理 typeidentify\n            case '%':\n            case '&':\n                tmp = getchar();\n                if(isalnum(tmp)){\n                    word += ch;\n                    word += tmp;\n                    ch = getchar();\n                    show(\"typeidentify\");\n                    break;\n                } else {\n                    ungetc(tmp, stdin);\n                    break;\n                }\n\n            // 这里对 0 进行特殊处理，后来可以在判断八进制中进行\n            case '0':\n                word += ch; ch = getchar();\n                show(\"integer\");\n                break;\n\n            default:\n                // ch = getchar();\n                break;\n        }\n            \n    }\n}\n")])])]),t("h2",{attrs:{id:"参考链接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考链接","aria-hidden":"true"}},[n._v("#")]),n._v(" 参考链接")]),n._v(" "),t("blockquote",[t("p",[n._v("[1] "),t("a",{attrs:{href:"http://c.biancheng.net/cpp/u/ctype_h/",target:"_blank",rel:"noopener noreferrer"}},[n._v("ctype.h - C语言中文网"),t("OutboundLink")],1)]),n._v(" "),t("p",[n._v("[2] "),t("a",{attrs:{href:"https://blog.csdn.net/wait_nothing_alone/article/details/78187971",target:"_blank",rel:"noopener noreferrer"}},[n._v("简单C语言词法分析器（C++实现）"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=r.exports}}]);