(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{401:function(t,a,s){"use strict";s.r(a);var e=s(9),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("base 家族中 base 58 的出场率跟 base64 没法比，而且在实现方法上也跟其他的不太一样，但是，如果换个角度看待的话，base 家族的原理都是一样的。")]),t._v(" "),s("p",[s("a",{attrs:{href:"http://ctf.ssleye.com/base58w.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("在线解码"),s("OutboundLink")],1)]),t._v(" "),s("h4",{attrs:{id:"先谈一下十六进制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#先谈一下十六进制","aria-hidden":"true"}},[t._v("#")]),t._v(" 先谈一下十六进制")]),t._v(" "),s("p",[t._v("我们先使用 16 进制引入一下，我们看一下十六进制："),s("code",[t._v("0xcafe")]),t._v(" 这里的 cafe 的每个字母都有自己的意义，c 所代表的数据是十进制的 12，a 所代表的数据是十进制的 10；而且 c 在高位，e 在低位；也就是说 16 进制的 16 个字符 "),s("code",[t._v("0123456789abcdef")]),t._v(" 只是用来表示数字的表，而他们每一个都只是一个符号罢了，只是在16进制中代表特殊的含义。")]),t._v(" "),s("p",[t._v("所以这个十六进制转换成 10 进制的方法就是")]),t._v(" "),s("blockquote",[s("p",[t._v("12 * 16^3 + 10 * 16^2 + 15 * 16^1 + 15 * 16^0")])]),t._v(" "),s("h4",{attrs:{id:"重新认识一下字符串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重新认识一下字符串","aria-hidden":"true"}},[t._v("#")]),t._v(" 重新认识一下字符串")]),t._v(" "),s("p",[t._v('一般的字符串使用的 ASCII 码对吧，一个 ASCII 码表示范围是 0-255，那么一个字符串是不是相当于一串 256 进制的数字，比方说 "hello"，这个字符串，h 表示高位，o 代表地位，而 h 所代表的数据就是十进制的 104，o 代表十进制的 101。那么同理，一个字符串也就是数字，也可以转化成其他的进制。（当然了，这不是巧合，计算机内部就是这么存储的）')]),t._v(" "),s("h4",{attrs:{id:"base的一个原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#base的一个原理","aria-hidden":"true"}},[t._v("#")]),t._v(" base的一个原理")]),t._v(" "),s("p",[t._v("为什么说是一个原理呢，因为我不知道这背后会不会是其他的原理，这些只是我的总结而已。如果有知道 base64 的原理的同学，可以回想一下，原理是不是把三位 ASCII 码，转化成四位 base64，每一位的值在 0-63 并使用下面的密码本来代替")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\n")])])]),s("p",[s("code",[t._v("256 ^ 3 == 64 ^ 4")]),t._v(" 所以实质上也就是进制转换。那么 base58 也就好理解了，只要把 256 进制转化成 58 进制并使用特殊的符号代替就好了。")]),t._v(" "),s("p",[t._v("首先看一下 base58 密码本的特点：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\n")])])]),s("ol",[s("li",[t._v("base_58 是用于 Bitcoin 中使用的一种独特的编码方式，主要用于产生Bitcoin的钱包地址")]),t._v(" "),s("li",[t._v('相比 base64，base58 不使用数字 "0"，字母大写"O"，字母大写 "I"，和字母小写 "l"，以及 "+" 和 "/" 符号')])]),t._v(" "),s("p",[t._v("脚本爆破：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" Crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Util"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("number "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" long_to_bytes\ncipher "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'D9cS9N9iHjMLTdA8YSMRMp'")]),t._v("\ncharset "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'")]),t._v("\nflag "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" cipher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  flag "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("chr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("charset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nres "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" flag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  res "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" res "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("58")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("ord")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nfff "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" long_to_bytes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fff"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("base58 and base64")]),t._v(" "),s("p",[t._v("相同:")]),t._v(" "),s("ol",[s("li",[t._v("一般都用于URL, 邮件文本, 可见字符显示.")]),t._v(" "),s("li",[t._v("都会造成信息冗余, 数据量增大, 因此不会用于大数据传输编码.")])]),t._v(" "),s("p",[t._v("区别:")]),t._v(" "),s("ol",[s("li",[t._v("编码集不同, base 58 的编码集在 base 64 的字符集的基础上去掉了比较容易混淆的字符.")]),t._v(" "),s("li",[t._v("base 64 采用直接切割 bit 的方法(8->6), 而 base 58 采用大数进制转换, 效率更低, 使用场景更少.")])])])}),[],!1,null,null,null);a.default=r.exports}}]);